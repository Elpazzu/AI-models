from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from imutils.video import VideoStream
import numpy as np
import tensorflow as tf
import imutils
import time
import cv2
import os

def detect_and_predict_mask(frame, faceNet, model_i):
	(h, w) = frame.shape[:2]
	blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224),
		(104.0, 177.0, 123.0))

	faceNet.setInput(blob)
	detections = faceNet.forward()

	faces = []
	locs = []
	preds = []

	for i in range(0, detections.shape[2]):
		confidence = detections[0, 0, i, 2]

		if confidence > 0.5:
			box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
			(startX, startY, endX, endY) = box.astype("int")

			(startX, startY) = (max(0, startX), max(0, startY))
			(endX, endY) = (min(w - 1, endX), min(h - 1, endY))

			face = frame[startY:endY, startX:endX]
			face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
			face = cv2.resize(face, (224, 224))
			face = img_to_array(face)
			face = preprocess_input(face)
			face = np.expand_dims(face, axis=0)

			faces.append(face)
			locs.append((startX, startY, endX, endY))

	if len(faces) > 0:
		preds = model_i.predict(faces)

	return (locs, preds)

prototxtPath = os.path.sep.join(["C:\\Users\makra\OneDrive\Desktop\Conda\ImageProcess\ethnicity-detector\ethnicity_detector", "deploy.prototxt"])
weightsPath = os.path.sep.join(["C:\\Users\makra\OneDrive\Desktop\Conda\ImageProcess\ethnicity-detector\ethnicity_detector",
	"res10_300x300_ssd_iter_140000.caffemodel"])
faceNet = cv2.dnn.readNetFromCaffe(prototxtPath, weightsPath)

with open('ethicity_detector.json', 'r') as json_file:
    json_savedModel= json_file.read()
model_i = tf.keras.models.model_from_json(json_savedModel)
model_i.load_weights('model.h5')
model_i.compile(loss='sparse_categorical_crossentropy',
         optimizer='SGD',
         metrics=['accuracy'])

vs = VideoStream(src=0).start()
time.sleep(2.0)

while True:
	frame = vs.read()
	frame = imutils.resize(frame, width=400)

	(locs, preds) = detect_and_predict_mask(frame, faceNet, model_i)

	for (box, pred) in zip(locs, preds):
		(startX, startY, endX, endY) = box
		(black, white) = pred

		label = "Black" if black > white else "White"
		color = (255, 100, 100) if label == "Black" else (100, 100, 255)

		label = "{}: {:.2f}%".format(label, max(black, white) * 100)

		cv2.putText(frame, label, (startX, startY - 10),
			cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)
		cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)

	cv2.imshow("Frame", frame)
	key = cv2.waitKey(1) & 0xFF

	if key == ord("q"):
		break

cv2.destroyAllWindows()
vs.stop()
