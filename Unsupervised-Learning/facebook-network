import csv
from operator import itemgetter
import networkx as nx
from networkx.algorithms import community

with open('fb_nodelist.csv', 'r') as nodecsv: 
    nodereader = csv.reader(nodecsv) 
    nodes = [n for n in nodereader][1:]

node_names = [n[0] for n in nodes]

with open('fb_edgelist.csv', 'r') as edgecsv:
    edgereader = csv.reader(edgecsv) 
    edges = [tuple(e) for e in edgereader][1:] 
    
print(len(node_names))
print(len(edges))

G = nx.Graph()
G.add_nodes_from(node_names)
G.add_edges_from(edges)
print(nx.info(G))

my_situation_dict = {}
gender_dict = {}
id_dict = {}

for node in nodes: 
    my_situation_dict[node[0]] = node[1]
    gender_dict[node[0]] = node[2]
    id_dict[node[0]] = node[3]

nx.set_node_attributes(G, my_situation_dict, 'friendship_source')
nx.set_node_attributes(G, gender_dict, 'gender')
nx.set_node_attributes(G, id_dict, 'friend_id')

for n in G.nodes():
    print(n, G.nodes[n]['gender']) 

density = nx.density(G)
print("Network density:", density)

friendship_path = nx.shortest_path(G, source="Noemie Honein", target="Scott Chen")
print("Shortest path between Noemie and Scott:", friendship_path)
print("Length of that path:", len(friendship_path)-1)

print(nx.is_connected(G))
components = nx.connected_components(G)
largest_component = max(components, key=len)
subgraph = G.subgraph(largest_component)
diameter = nx.diameter(subgraph)
print("Network diameter of largest component:", diameter)

triadic_closure = nx.transitivity(G)
print("Triadic closure:", triadic_closure)

degree_dict = dict(G.degree(G.nodes()))
nx.set_node_attributes(G, degree_dict, 'degree')
print(G.nodes['Kamil Baaklini'])

sorted_degree = sorted(degree_dict.items(), key=itemgetter(1), reverse=True)
print("Top 20 nodes by degree:")
for d in sorted_degree[:20]:
    print(d)
    
betweenness_dict = nx.betweenness_centrality(G) 
eigenvector_dict = nx.eigenvector_centrality(G) 

nx.set_node_attributes(G, betweenness_dict, 'betweenness')
nx.set_node_attributes(G, eigenvector_dict, 'eigenvector')

sorted_betweenness = sorted(betweenness_dict.items(), key=itemgetter(1), reverse=True)

print("Top 20 nodes by betweenness centrality:")
for b in sorted_betweenness[:20]:
    print(b)

top_betweenness = sorted_betweenness[:20]

for tb in top_betweenness: 
    degree = degree_dict[tb[0]] 
    print("Name:", tb[0], "| Betweenness Centrality:", tb[1], "| Degree:", degree)

communities = community.greedy_modularity_communities(G)

modularity_dict = {} 
for i,c in enumerate(communities): 
    for name in c: 
        modularity_dict[name] = i 

nx.set_node_attributes(G, modularity_dict, 'modularity')

class0 = [n for n in G.nodes() if G.nodes[n]['modularity'] == 0]
class0_eigenvector = {n:G.nodes[n]['eigenvector'] for n in class0}
class0_sorted_by_eigenvector = sorted(class0_eigenvector.items(), key=itemgetter(1), reverse=True)

print("Modularity Class 0 Sorted by Eigenvector Centrality:")
for node in class0_sorted_by_eigenvector[:5]:
    print("Name:", node[0], "| Eigenvector Centrality:", node[1])
    
for i,c in enumerate(communities): 
    if len(c) > 2: 
        print('Class '+str(i)+':', list(c)) 

nx.write_gexf(G, 'fb_network.gexf')
