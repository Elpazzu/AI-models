import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import curve_fit
from IPython.display import display

trainDf = pd.read_csv("order_products__train.csv")
orderDf = pd.read_csv("orders.csv")
depDf = pd.read_csv("departments.csv")
aisleDf = pd.read_csv("aisles.csv")
productDf = pd.read_csv("products.csv")

print(orderDf.shape)
print(productDf.shape)

sns.set_style('whitegrid')
customerNumOrderFrame = orderDf.groupby("user_id",as_index = False)["order_number"].max()
num_bins = 10
n, bins, patches = plt.hist(customerNumOrderFrame["order_number"] , num_bins, color='blue', alpha=0.5)
mu = customerNumOrderFrame["order_number"].mean()
sigma = customerNumOrderFrame["order_number"].std()
print("mean: ", mu)
print("standard deviation: ", sigma)

n, bins, patches = plt.hist(customerNumOrderFrame["order_number"] , num_bins, facecolor='yellow', alpha=0.5)

bins = np.delete(bins,10)
bins = bins+5

def exponenial_func(x, a, b, c):
    return a*np.exp(-b*x)+c

popt, pcov = curve_fit(exponenial_func, bins, n, p0=(1, 1e-6, 1), maxfev=10000)

xx = np.linspace(8, 100, 30)
yy = exponenial_func(xx, *popt)

plt.plot(xx, yy ,'r--')
plt.xlabel("No. of Orders")
plt.ylabel("Count")
plt.title("Number of Orders per Customer Distribution")

priorDf = pd.read_csv("order_products__prior.csv")
trainDf = trainDf.append(priorDf,ignore_index = True)

productCountDf = trainDf.groupby("product_id",as_index = False)["order_id"].count()
print(productCountDf.shape)

topLev = 20

productCountDf = productCountDf.sort_values("order_id",ascending = False)
topProdFrame = productCountDf.iloc[0:topLev,:]
topProdFrame = topProdFrame.merge(productDf,on = "product_id")
display(topProdFrame.loc[:,["product_name"]])

productCountDf["density"] = (productCountDf["order_id"]/np.sum(productCountDf["order_id"]))
productCountDf["rank"] = range(productCountDf.shape[0])
plt.plot(productCountDf["rank"],productCountDf["density"])
plt.title("Density Plot for product counts")
plt.xlabel("Rank")
plt.ylabel("Density")

productCountDf["logRank"] = np.log(productCountDf["rank"] + 1) 
plt.title("Density Plot for product counts")
plt.xlabel("$\log(Rank)$")
plt.ylabel("Density")
plt.plot(productCountDf["logRank"],productCountDf["density"])

grouped = orderDf.groupby("order_id")["order_dow"].aggregate("sum").reset_index()
grouped = grouped.order_dow.value_counts()

sns.barplot(grouped.index, grouped.values)
plt.ylabel('Number of orders', fontsize=13)
plt.xlabel('Days of order in a week', fontsize=13)
plt.show()
print(len(set(orderDf.user_id)))
