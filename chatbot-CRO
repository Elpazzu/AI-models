import nltk
import random
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

f=open('chatbot.txt','r',errors = 'ignore')
raw=f.read()
raw=raw.lower()# converts to lowercase
nltk.download('punkt') 
nltk.download('wordnet') 
sent_tokens = nltk.sent_tokenize(raw) 
word_tokens = nltk.word_tokenize(raw)

#print(sent_tokens[:2])
#print(word_tokens[:2])

lemmer = nltk.stem.WordNetLemmatizer()
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

GREETING_INPUTS = ("hello", "hi", "greetings", "hey")
GREETING_RESPONSES = ["hi", "hey", "hi there", "hello", "I am glad! You are talking to me"]
CHITCHAT1_INPUTS = ("sup", "howdy")
CHITCHAT1_RESPONSES = ["I am fine, how can I help you?", "Doing awesome, can I be of any assistance?"]
BADWORDS_INPUTS = ("fuck", "ass", "dick", "suck", "hell", "idiot", "stupid")
BADWORDS_RESPONSES = ["You are being disrespectful...", "I may be a bot... but I still have feelings!"]
ELABORATE_INPUTS = ("elaborate")
ELABORATE_RESPONSES = ["Please visit the following pages for additional info on: \
                       - Cobots: https://cobotsguide.com/ \
                       - Chief Robotics Officers: https://www.machinedesign.com/automation-iiot/article/21837493/who-manages-the-robots-introducing-the-chief-robotics-officer \
                       - Robotics & Intelligent Operational Systems: https://www.ey.com/Publication/vwLUAssets/ey-robotics-and-intelligent-automation/$FILE/ey-robotics-and-intelligent-automation.pdf"]
def greeting(sentence):
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)
        elif word.lower() in CHITCHAT1_INPUTS:
            return random.choice(CHITCHAT1_RESPONSES)
        elif word.lower() in BADWORDS_INPUTS:
            return random.choice(BADWORDS_RESPONSES)
        elif word.lower() in ELABORATE_INPUTS:
            return random.choice(ELABORATE_RESPONSES)

def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize)
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response
    
flag=True
print("CRO-BOT: My name is CRO-BOT. I will answer your questions about Chief Robotics Officers based on Robotics Business Review's CRO Whitepaper (https://www.ciowhitepapersreview.com/whitepaper_file/1504698797_57123311_467093052CIO-Review-Whitepaper.pdf). If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("CRO-BOT: You are welcome")
        else:
            if(greeting(user_response)!=None):
                print("CRO-BOT: "+greeting(user_response))
            else:
                print("CRO-BOT: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("CRO-BOT: Goodbye")
